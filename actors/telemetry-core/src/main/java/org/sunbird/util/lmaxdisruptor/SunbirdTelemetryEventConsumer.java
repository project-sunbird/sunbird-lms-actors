package org.sunbird.util.lmaxdisruptor;

import com.google.common.net.HttpHeaders;
import com.google.gson.Gson;
import com.lmax.disruptor.EventHandler;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import org.sunbird.common.models.util.HttpUtil;
import org.sunbird.common.models.util.JsonKey;
import org.sunbird.common.models.util.LoggerEnum;
import org.sunbird.common.models.util.ProjectLogger;
import org.sunbird.common.models.util.PropertiesCache;
import org.sunbird.common.request.Request;
import org.sunbird.common.request.TelemetryV3Request;

/**
 * This class will send telemetry data to sunbird telemetry service. sunbird telemetry service has
 * the logic for data storage in sunbird and passing same data to Ekstep telemetry.
 *
 * @author Manzarul
 */
public class SunbirdTelemetryEventConsumer implements EventHandler<Request> {

  @Override
  public void onEvent(Request request, long sequence, boolean endOfBatch) throws Exception {
    ProjectLogger.log("SunbirdTelemetryEventConsumer:onEvent called.", LoggerEnum.INFO.name());
    if (request != null) {
      try {
        Gson gson = new Gson();
        String response =
            HttpUtil.sendPostRequest(
                getTelemetryUrl(), gson.toJson(getEkstepTelemetryRequest(request)), getHeaders());
        ProjectLogger.log(
            "SunbirdTelemetryEventConsumer:onEvent request process status = " + response,
            LoggerEnum.INFO.name());
      } catch (Exception e) {
        ProjectLogger.log(
            "SunbirdTelemetryEventConsumer:onEvent exception occured = " + e.getMessage(), e);
        ProjectLogger.log(
            "SunbirdTelemetryEventConsumer:onEvent exception occured during telemetry data processing.Data = "
                + new Gson().toJson(getEkstepTelemetryRequest(request)),
            LoggerEnum.INFO.name());
      }
    }
  }

  private Map<String, String> getHeaders() {
    Map<String, String> headers = new HashMap<String, String>();
    headers.put(HttpHeaders.CONTENT_TYPE, "application/json");
    return headers;
  }

  /**
   * This method will return telemetry url. it will read sunbird_lms_base_url key for base url .
   * First it will try to read value from environment in case of absence it will read value from
   * property cache. It will read the uri from sunbird_lms_telemetry_api_url key in above describe
   * way.
   *
   * @return complete url for telemetry service.
   */
  private String getTelemetryUrl() {
    String telemetryBaseUrl = System.getenv(JsonKey.SUNBIRD_LMS_TELEMETRY_BASE_URL);
    if (StringUtils.isBlank(telemetryBaseUrl)) {
      telemetryBaseUrl =
          PropertiesCache.getInstance().getProperty(JsonKey.SUNBIRD_LMS_TELEMETRY_BASE_URL);
    }
    telemetryBaseUrl =
        telemetryBaseUrl
            + PropertiesCache.getInstance().getProperty(JsonKey.SUNBIRD_LMS_TELEMETRY_API_URL);
    ProjectLogger.log(
        "SunbirdTelemetryEventConsumer:getTelemetryUrl url = " + telemetryBaseUrl,
        LoggerEnum.INFO.name());
    return telemetryBaseUrl;
  }

  /**
   * This method will transform incoming requested data to ekstep telemetry data structure.
   *
   * @param request this will contains telemetry data generated by Sunbird.
   * @return Structured telemetry data accepted by Ekstep.
   */
  @SuppressWarnings({"unchecked", "rawtypes"})
  private TelemetryV3Request getEkstepTelemetryRequest(Request request) {
    TelemetryV3Request telemetryV3Request = new TelemetryV3Request();
    if (request.getRequest().get(JsonKey.ETS) != null
        && request.getRequest().get(JsonKey.ETS) instanceof BigInteger) {
      telemetryV3Request.setEts(((BigInteger) request.getRequest().get(JsonKey.ETS)).longValue());
    }
    if (request.getRequest().get(JsonKey.EVENTS) != null
        && request.getRequest().get(JsonKey.EVENTS) instanceof List
        && !(((List) request.getRequest().get(JsonKey.EVENTS)).isEmpty())) {
      List<Map<String, Object>> events =
          (List<Map<String, Object>>) request.getRequest().get(JsonKey.EVENTS);
      telemetryV3Request.setEvents(events);
      ProjectLogger.log(
          "SunbirdTelemetryEventConsumer:getEkstepTelemetryRequest events count: " + events.size(),
          LoggerEnum.INFO.name());
    }
    return telemetryV3Request;
  }
}
